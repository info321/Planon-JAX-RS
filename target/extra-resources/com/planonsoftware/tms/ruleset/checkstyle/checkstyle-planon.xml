<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- 
  Planon TMS version info:
  $Header: svn://svn/TMSEE/__Platform/Maven/CodingRuleset/trunk/source/src/main/resources/com/planonsoftware/tms/ruleset/checkstyle/checkstyle-planon.xml 87190 2018-07-10 16:16:29Z raklop $
-->
<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: PlanonCheckStyle
    Description: none
-->
<module name="Checker">
    <property name="severity" value="error"/>
    <!-- <property name="fileExtensions" value="java, properties, xml"/> -->
    <module name="TreeWalker">
        <!-- no MANDATORY javadoc or comments -->
        <!--
    <module name="JavadocMethod">
      <property name="scope" value="public"/>
    </module>
    <module name="JavadocType">
      <property name="scope" value="public"/>
    </module>
    <module name="JavadocVariable">
      <property name="scope" value="public"/>
    </module>
    -->
        <module name="JavadocStyle">
            <property name="checkFirstSentence" value="false"/>
        </module>
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MethodName">
            <property name="format" value="^([a-z][a-zA-Z0-9]*|test[a-zA-Z0-9_]*)$"/>
        </module>
        <module name="MemberName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
        </module>
        <!-- Not to restrict the variable names length when to give a meaning full name. -->
        <!--  <module name="LineLength">
      <property name="ignorePattern" value="^ *\* \$.*$"/>
      <property name="max" value="150"/>
    </module> -->
        <module name="ParameterNumber">
            <property name="severity" value="warning"/>
        </module>
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <!-- It does not play well with the Planon formatter -->
        <!-- These can be useful. Need further investigation of correct configuration -->
        <!--  <module name="NoWhitespaceAfter"/>-->
        <!-- <module name="NoWhitespaceBefore"/> -->
        <!--  <module name="WhitespaceAfter"/> -->
        <!--  <module name="WhitespaceAround"/> -->
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="ModifierOrder"/>
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="NeedBraces"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <!-- we prefer to NOT have default in switch, espesially when using enums. 
            Compiler will warn when new enums are added.-->
        <!--<module name="MissingSwitchDefault"/>-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <!--  Nothing wrong could be with founded classes. 
    This check makes sense only for library projects (not an application projects) 
    which care of ideal OOP-design to make sure that class works in all cases even misusage.
    Even in library projects this check most likely will find classes that are designed for extension by somebody. -->
        <!-- <module name="DesignForExtension"/> -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>
        <module name="ArrayTypeStyle"/>
        <!-- deactived. don't want finals to clutter the code -->
        <!--<module name="FinalParameters"/>-->
        <module name="UpperEll"/>
    </module>
    <module name="NewlineAtEndOfFile"/>
    <module name="Translation"/>
    <module name="FileTabCharacter">
        <property name="fileExtensions" value="java"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="System\.(out|err)\.print(ln)?"/>
        <property name="message" value="Use a logger or an explicit output stream instead of System.out or System.err."/>
        <property name="severity" value="warning"/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.config.dir}/checkstyle-suppressions.xml"/>
    </module>
</module>
